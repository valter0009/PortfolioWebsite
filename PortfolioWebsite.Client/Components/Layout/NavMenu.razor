@using PortfolioWebsite.Client.Components.Pages.Shop
@using PortfolioWebsite.Client.Services.Contracts
@inject IJSRuntime JSRuntime
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider
<nav class="navbar navbar-expand-lg bg-body-tertiary px-4 sticky-top gothic-font" id="navbar">
    <div class="container-fluid">
        
        <a class="navbar-brand mb-1" href="">
            <img src="/img/brand.svg" alt="brand" width="150" />
        </a>

       
        <button class="navbar-toggler rotate-back" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        
        <div class="collapse navbar-collapse mt-2" id="navbarCollapse">
            <ul class="navbar-nav ms-auto mb-2 fs-5 d-flex">
                <li class="nav-item">
                    <a class="nav-link mx-lg-3 hover-underline-animation" aria-current="page" href="">home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link mx-lg-3 hover-underline-animation" href="gallery">gallery</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link mx-lg-3 hover-underline-animation" href="shop">shop</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link mx-lg-3 hover-underline-animation" href="contact">contact</a>
                </li>
                
                <AuthorizeView>
                    <CartMenu />
                </AuthorizeView>

                 <AuthenticationStatus />
               
                
            </ul>
        </div>
    </div>
</nav>




@code {
    protected override void OnInitialized()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += AuthenticationStateChanged;
    }

    private async void AuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authState = await task;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            await AuthService.CreateUser();
            
            StateHasChanged();
        }
    }

    public void Dispose()
    {
       
        AuthenticationStateProvider.AuthenticationStateChanged -= AuthenticationStateChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
           
            await JSRuntime.InvokeVoidAsync("toggleHamburger");
        }
    }
}